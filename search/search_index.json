{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome! # Welcome to the XAI Demonstrator 's technical documentation.","title":"Home"},{"location":"#welcome","text":"Welcome to the XAI Demonstrator 's technical documentation.","title":"Welcome!"},{"location":"about/","text":"About # The XAI Demonstrator is a modular platform that lets users interact with production-grade Explainable AI (XAI) systems. It is developed by a team at the Institute of Business Analytics at the University of Ulm. Team # Hanna Broder Maximilian F\u00f6rster Philipp H\u00fchn Kilian Kluge Lars Mostue Mike Rothenh\u00e4usler Isabel Sch\u00f6berl Philipp Schr\u00f6ppel Irina Sigler License # The XAI Demonstrator is licensed under the terms of the Apache 2.0 license. See the LICENSE file for details. Funding # Initial conceptualization, design, and development of the XAI Demonstrator was supported by the P\u00e9ter Horv\u00e1th-Stiftung.","title":"About"},{"location":"about/#about","text":"The XAI Demonstrator is a modular platform that lets users interact with production-grade Explainable AI (XAI) systems. It is developed by a team at the Institute of Business Analytics at the University of Ulm.","title":"About"},{"location":"about/#team","text":"Hanna Broder Maximilian F\u00f6rster Philipp H\u00fchn Kilian Kluge Lars Mostue Mike Rothenh\u00e4usler Isabel Sch\u00f6berl Philipp Schr\u00f6ppel Irina Sigler","title":"Team"},{"location":"about/#license","text":"The XAI Demonstrator is licensed under the terms of the Apache 2.0 license. See the LICENSE file for details.","title":"License"},{"location":"about/#funding","text":"Initial conceptualization, design, and development of the XAI Demonstrator was supported by the P\u00e9ter Horv\u00e1th-Stiftung.","title":"Funding"},{"location":"tech-notes/gcp/","text":"Deploying to Google Cloud Platform # Why? # What we ended up with # Cloud Run # Firebase Hosting # Things we've tried # Delivering frontends via Google Cloud Storage # Running on GPUs with Cloud Run for Anthos #","title":"Deploying to Google Cloud Platform"},{"location":"tech-notes/gcp/#deploying-to-google-cloud-platform","text":"","title":"Deploying to Google Cloud Platform"},{"location":"tech-notes/gcp/#why","text":"","title":"Why?"},{"location":"tech-notes/gcp/#what-we-ended-up-with","text":"","title":"What we ended up with"},{"location":"tech-notes/gcp/#cloud-run","text":"","title":"Cloud Run"},{"location":"tech-notes/gcp/#firebase-hosting","text":"","title":"Firebase Hosting"},{"location":"tech-notes/gcp/#things-weve-tried","text":"","title":"Things we've tried"},{"location":"tech-notes/gcp/#delivering-frontends-via-google-cloud-storage","text":"","title":"Delivering frontends via Google Cloud Storage"},{"location":"tech-notes/gcp/#running-on-gpus-with-cloud-run-for-anthos","text":"","title":"Running on GPUs with Cloud Run for Anthos"},{"location":"tech-notes/monorepo/","text":"Monorepo # Why? # CI/CD with GitHub Actions # Coverage #","title":"Monorepo"},{"location":"tech-notes/monorepo/#monorepo","text":"","title":"Monorepo"},{"location":"tech-notes/monorepo/#why","text":"","title":"Why?"},{"location":"tech-notes/monorepo/#cicd-with-github-actions","text":"","title":"CI/CD with GitHub Actions"},{"location":"tech-notes/monorepo/#coverage","text":"","title":"Coverage"},{"location":"tech-notes/tech-stack/","text":"Selecting the XAI Demonstrator's Tech Stack # Technical requirements # Development requirements #","title":"Selecting the XAI Demonstrator's Tech Stack"},{"location":"tech-notes/tech-stack/#selecting-the-xai-demonstrators-tech-stack","text":"","title":"Selecting the XAI Demonstrator's Tech Stack"},{"location":"tech-notes/tech-stack/#technical-requirements","text":"","title":"Technical requirements"},{"location":"tech-notes/tech-stack/#development-requirements","text":"","title":"Development requirements"},{"location":"use-cases/review-sentiment/","text":"Customer Review Sentiment Analysis # Running the service locally (with Docker) # To launch a standalone instance of the service: cd review-sentiment docker-compose up Running the service locally (without Docker) # During development, it can be desirable to launch the service directly and not as a Docker container. For instance, this allows to get rapid feedback on changes to the backend code. cd review-sentiment ./build_frontend.sh cd sentiment-backend uvicorn sentiment.main:app","title":"Customer Review Sentiment Analysis"},{"location":"use-cases/review-sentiment/#customer-review-sentiment-analysis","text":"","title":"Customer Review Sentiment Analysis"},{"location":"use-cases/review-sentiment/#running-the-service-locally-with-docker","text":"To launch a standalone instance of the service: cd review-sentiment docker-compose up","title":"Running the service locally (with Docker)"},{"location":"use-cases/review-sentiment/#running-the-service-locally-without-docker","text":"During development, it can be desirable to launch the service directly and not as a Docker container. For instance, this allows to get rapid feedback on changes to the backend code. cd review-sentiment ./build_frontend.sh cd sentiment-backend uvicorn sentiment.main:app","title":"Running the service locally (without Docker)"},{"location":"use-cases/visual-inspection/","text":"Visual Inspection # Running the service locally (with Docker) # To launch a standalone instance of the service: cd visual-inspection docker-compose up Running the service locally (without Docker) # During development, it can be desirable to launch the service directly and not as a Docker container. For instance, this allows to get rapid feedback on changes to the backend code. cd visual-inspection ./build_frontend.sh cd inspection-backend uvicorn inspection.main:app Log input images # For development purposes, the service can be configured to write the raw input images to disk. This setting is controlled through the environment variable LOG_INPUT : export LOG_INPUT=1 By default, the images are collected in a sub-folder ./log . To change where the images are saved to, set the environment variable LOG_PATH , e.g.: export LOG_PATH=/home/myusername/log","title":"Visual Inspection"},{"location":"use-cases/visual-inspection/#visual-inspection","text":"","title":"Visual Inspection"},{"location":"use-cases/visual-inspection/#running-the-service-locally-with-docker","text":"To launch a standalone instance of the service: cd visual-inspection docker-compose up","title":"Running the service locally (with Docker)"},{"location":"use-cases/visual-inspection/#running-the-service-locally-without-docker","text":"During development, it can be desirable to launch the service directly and not as a Docker container. For instance, this allows to get rapid feedback on changes to the backend code. cd visual-inspection ./build_frontend.sh cd inspection-backend uvicorn inspection.main:app","title":"Running the service locally (without Docker)"},{"location":"use-cases/visual-inspection/#log-input-images","text":"For development purposes, the service can be configured to write the raw input images to disk. This setting is controlled through the environment variable LOG_INPUT : export LOG_INPUT=1 By default, the images are collected in a sub-folder ./log . To change where the images are saved to, set the environment variable LOG_PATH , e.g.: export LOG_PATH=/home/myusername/log","title":"Log input images"},{"location":"user-guide/deployment/","text":"Permanent deployment # What does 'deployment' mean? # In the Getting Started chapter of this user guide, you have learned how to spin up an XAI Demonstrator instance. In IT lingo, a 'deployment' is a permanently running instance of an IT system. It comprises both a number of services, their configuration, and the infrastructure on which it runs. Deploy a private instance in a private network # You can use the test-local configuration as described in Getting Started . If you want to use your own or modified use cases, there are two options. If have your own container registry, which we recommend, you can fork test-local . If you don't, you will need to build the containers on the target machine. Check out the \"global\" docker-compose.yml and work from there. Ports For others to access your deployment, you need to open the port your server is running at. In the standard configuration, that's port 8000. Deploy a public instance on the internet # You probably want to have HTTPS and run on a dedicated server. Never connect your personal computers or internal servers to the internet! We strongly recommend using a dedicated VM instance. Ports For others to access your deployment, you need to open ports 80 and 443. Deploy a production-grade setup on Google Cloud Platform # What is the difference? Costs You need to set spending limits and monitor the costs. What's next? #","title":"Permanent deployment"},{"location":"user-guide/deployment/#permanent-deployment","text":"","title":"Permanent deployment"},{"location":"user-guide/deployment/#what-does-deployment-mean","text":"In the Getting Started chapter of this user guide, you have learned how to spin up an XAI Demonstrator instance. In IT lingo, a 'deployment' is a permanently running instance of an IT system. It comprises both a number of services, their configuration, and the infrastructure on which it runs.","title":"What does 'deployment' mean?"},{"location":"user-guide/deployment/#deploy-a-private-instance-in-a-private-network","text":"You can use the test-local configuration as described in Getting Started . If you want to use your own or modified use cases, there are two options. If have your own container registry, which we recommend, you can fork test-local . If you don't, you will need to build the containers on the target machine. Check out the \"global\" docker-compose.yml and work from there. Ports For others to access your deployment, you need to open the port your server is running at. In the standard configuration, that's port 8000.","title":"Deploy a private instance in a private network"},{"location":"user-guide/deployment/#deploy-a-public-instance-on-the-internet","text":"You probably want to have HTTPS and run on a dedicated server. Never connect your personal computers or internal servers to the internet! We strongly recommend using a dedicated VM instance. Ports For others to access your deployment, you need to open ports 80 and 443.","title":"Deploy a public instance on the internet"},{"location":"user-guide/deployment/#deploy-a-production-grade-setup-on-google-cloud-platform","text":"What is the difference? Costs You need to set spending limits and monitor the costs.","title":"Deploy a production-grade setup on Google Cloud Platform"},{"location":"user-guide/deployment/#whats-next","text":"","title":"What's next?"},{"location":"user-guide/dev-setup/","text":"Set Up Your Development Environment # The purpose of this short instruction is to set up an environment to clone the repository and run it locally on the users computer. Quick Start # If you've developed with (parts of) the XAI Demonstrator's tech stack before, chances are that you already have the required software installed or do not need detailed setup instructions. To write code for the XAI Demonstrator, you need Git Node.js Python Then, you can clone github.com/XAI-Demonstrator/xai-demonstrator and are good to go. Tools # All you need is a text editor and a terminal (under Windows, we recommend you use Git Bash that ships with Git for Windows ). The XAI Demonstrator team uses PyCharm Professional , which supports not only Python, but web development as well. It can be downloaded here . (Note that the Community version has only limited support for web development. The Professional version can be obtained for free for students and other educational users.) Get the code # Install Git # As almost all modern software projects, the XAI Demonstrator's code is stored in a Git repository. Prepare your macOS device \ud83c\udf4e If your computer is running macOS, it's easiest to use Homebrew to install Git and the other required software. If Homebrew ist not yet installed, run following command in the command line: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" macOS : brew install git Linux (Debian-based) : apt-get install git Windows : Download installer from the official website Clone the repository # Navigate to the directory in which you want to keep the source code and run git clone https://github.com/XAI-Demonstrator/xai-demonstrator.git Prepare for frontend development # Install Node.js # The XAI Demonstrator's frontends require the Node.js JavaScript runtime . macOS : brew install node@12 Windows : Download the installer from the official website Recommendation: Use a Node.js Version Manager \ud83d\udca1 If you frequently work with Node.js or would like to install Node.js cleanly separated from your other software, we recommend you use a version manager such as NVM or NVM for Windows Install frontend dependencies # Navigate to the frontend's directory (e.g., cd visual-inspection/inspection-frontend ) and run npm install . To check that everything works as expected, run npm run test:unit to execute the unit test suite. Afterwards, you can launch the frontend development server using npm run serve . Prepare for backend development # Install Python # The XAI Demonstrator's backends require Python 3.8. We recommend that you set up a dedicated Python environment for your work on the XAI Demonstrator. While the different components and use cases each have their own set of requirements, to date these requirements are compatible. Linux : We recommend using PyEnv to obtain the correct Python version and set up the virtual environment. macOS and Windows : We recommend using the Anaconda distribution . Install backend dependencies # Make sure your Python environment is activated and navigate to the backend's directory (e.g., cd visual-inspection/inspection-backend ). Then, first run pip install -r requirements.txt to install the backend's dependencies. To install the test dependencies that are only required for testing and development purposes, run pip install -r requirements-test.txt . To check that everything works as expected, run pytest tests/ to execute the unit test suite. What's next? # TODO","title":"Set Up Your Development Environment"},{"location":"user-guide/dev-setup/#set-up-your-development-environment","text":"The purpose of this short instruction is to set up an environment to clone the repository and run it locally on the users computer.","title":"Set Up Your Development Environment"},{"location":"user-guide/dev-setup/#quick-start","text":"If you've developed with (parts of) the XAI Demonstrator's tech stack before, chances are that you already have the required software installed or do not need detailed setup instructions. To write code for the XAI Demonstrator, you need Git Node.js Python Then, you can clone github.com/XAI-Demonstrator/xai-demonstrator and are good to go.","title":"Quick Start"},{"location":"user-guide/dev-setup/#tools","text":"All you need is a text editor and a terminal (under Windows, we recommend you use Git Bash that ships with Git for Windows ). The XAI Demonstrator team uses PyCharm Professional , which supports not only Python, but web development as well. It can be downloaded here . (Note that the Community version has only limited support for web development. The Professional version can be obtained for free for students and other educational users.)","title":"Tools"},{"location":"user-guide/dev-setup/#get-the-code","text":"","title":"Get the code"},{"location":"user-guide/dev-setup/#install-git","text":"As almost all modern software projects, the XAI Demonstrator's code is stored in a Git repository. Prepare your macOS device \ud83c\udf4e If your computer is running macOS, it's easiest to use Homebrew to install Git and the other required software. If Homebrew ist not yet installed, run following command in the command line: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" macOS : brew install git Linux (Debian-based) : apt-get install git Windows : Download installer from the official website","title":"Install Git"},{"location":"user-guide/dev-setup/#clone-the-repository","text":"Navigate to the directory in which you want to keep the source code and run git clone https://github.com/XAI-Demonstrator/xai-demonstrator.git","title":"Clone the repository"},{"location":"user-guide/dev-setup/#prepare-for-frontend-development","text":"","title":"Prepare for frontend development"},{"location":"user-guide/dev-setup/#install-nodejs","text":"The XAI Demonstrator's frontends require the Node.js JavaScript runtime . macOS : brew install node@12 Windows : Download the installer from the official website Recommendation: Use a Node.js Version Manager \ud83d\udca1 If you frequently work with Node.js or would like to install Node.js cleanly separated from your other software, we recommend you use a version manager such as NVM or NVM for Windows","title":"Install Node.js"},{"location":"user-guide/dev-setup/#install-frontend-dependencies","text":"Navigate to the frontend's directory (e.g., cd visual-inspection/inspection-frontend ) and run npm install . To check that everything works as expected, run npm run test:unit to execute the unit test suite. Afterwards, you can launch the frontend development server using npm run serve .","title":"Install frontend dependencies"},{"location":"user-guide/dev-setup/#prepare-for-backend-development","text":"","title":"Prepare for backend development"},{"location":"user-guide/dev-setup/#install-python","text":"The XAI Demonstrator's backends require Python 3.8. We recommend that you set up a dedicated Python environment for your work on the XAI Demonstrator. While the different components and use cases each have their own set of requirements, to date these requirements are compatible. Linux : We recommend using PyEnv to obtain the correct Python version and set up the virtual environment. macOS and Windows : We recommend using the Anaconda distribution .","title":"Install Python"},{"location":"user-guide/dev-setup/#install-backend-dependencies","text":"Make sure your Python environment is activated and navigate to the backend's directory (e.g., cd visual-inspection/inspection-backend ). Then, first run pip install -r requirements.txt to install the backend's dependencies. To install the test dependencies that are only required for testing and development purposes, run pip install -r requirements-test.txt . To check that everything works as expected, run pytest tests/ to execute the unit test suite.","title":"Install backend dependencies"},{"location":"user-guide/dev-setup/#whats-next","text":"TODO","title":"What's next?"},{"location":"user-guide/getting-started/","text":"Getting started # Get the source code # To develop your own use cases and contribute to the XAI Demonstrator you need the software tool Git to manage your source code files. Git is a so-called version control system that keeps track of all the changes that are made and enables teams to work on the same piece of software without making a mess. Don't worry if you've never used Git before. In this tutorial, we'll show you all the commands you need in detail. Installing Git To install Git , see the instructions here Downloading without Git If you just want to quickly try out the XAI Demonstrator and do not have Git installed, you can simply download the source code as a ZIP file . However, please note that without Git you will not be able to run use cases locally, because Python dependencies are installed through Git. Thus, you are restricted to launching deployment configurations that utilize pre-built container images (more on that in the next section). To download (\"check out\") the XAI Demontrator source code from GitHub, open a terminal (on Windows, we recommend Git Bash ) git clone https://github.com/xai-demonstrator/xai-demonstrator.git After a couple of seconds, you'll find the entire XAI Demonstrator source code in a new folder called xai-demonstrator . Install Docker # All parts of the XAI Demonstrator are packaged and run as Docker containers. These are best thought of as self-contained units that contain all required dependencies and runtimes. To run the XAI Demonstrator or individual use cases locally, you need to install Docker (but nothing else). Docker is available for all common operating systems. See the instructions in the Docker documentation to learn how to install Docker Engine on your local machine. Make sure you install the docker-compose utility as well. Run your very own XAI Demonstrator instance # To launch the full XAI Demonstrator , you can use the test-local configuration: cd xai-demonstrator/deployments/test-local docker-compose up Download size This will download several GB of files from the GitHub Container Registry! After the downloads completed and the containers are spun up, you can visit your very own XAI Demonstrator at http://localhost:8000/ . We used only a very small part of the source code: cat docker-compose.yml Run a single use case # What does it do? cd xai-demonstrator/visual-inspection docker build . docker run . You can take a look at the Dockerfile , we'll get to that in more detail later. Modify a use case # (Make a small change to the frontend.) What's next? # Congratulations! You have not only set up everything that's necessary to run your very own XAI Demonstrator , but already a use case.","title":"Getting started"},{"location":"user-guide/getting-started/#getting-started","text":"","title":"Getting started"},{"location":"user-guide/getting-started/#get-the-source-code","text":"To develop your own use cases and contribute to the XAI Demonstrator you need the software tool Git to manage your source code files. Git is a so-called version control system that keeps track of all the changes that are made and enables teams to work on the same piece of software without making a mess. Don't worry if you've never used Git before. In this tutorial, we'll show you all the commands you need in detail. Installing Git To install Git , see the instructions here Downloading without Git If you just want to quickly try out the XAI Demonstrator and do not have Git installed, you can simply download the source code as a ZIP file . However, please note that without Git you will not be able to run use cases locally, because Python dependencies are installed through Git. Thus, you are restricted to launching deployment configurations that utilize pre-built container images (more on that in the next section). To download (\"check out\") the XAI Demontrator source code from GitHub, open a terminal (on Windows, we recommend Git Bash ) git clone https://github.com/xai-demonstrator/xai-demonstrator.git After a couple of seconds, you'll find the entire XAI Demonstrator source code in a new folder called xai-demonstrator .","title":"Get the source code"},{"location":"user-guide/getting-started/#install-docker","text":"All parts of the XAI Demonstrator are packaged and run as Docker containers. These are best thought of as self-contained units that contain all required dependencies and runtimes. To run the XAI Demonstrator or individual use cases locally, you need to install Docker (but nothing else). Docker is available for all common operating systems. See the instructions in the Docker documentation to learn how to install Docker Engine on your local machine. Make sure you install the docker-compose utility as well.","title":"Install Docker"},{"location":"user-guide/getting-started/#run-your-very-own-xai-demonstrator-instance","text":"To launch the full XAI Demonstrator , you can use the test-local configuration: cd xai-demonstrator/deployments/test-local docker-compose up Download size This will download several GB of files from the GitHub Container Registry! After the downloads completed and the containers are spun up, you can visit your very own XAI Demonstrator at http://localhost:8000/ . We used only a very small part of the source code: cat docker-compose.yml","title":"Run your very own XAI Demonstrator instance"},{"location":"user-guide/getting-started/#run-a-single-use-case","text":"What does it do? cd xai-demonstrator/visual-inspection docker build . docker run . You can take a look at the Dockerfile , we'll get to that in more detail later.","title":"Run a single use case"},{"location":"user-guide/getting-started/#modify-a-use-case","text":"(Make a small change to the frontend.)","title":"Modify a use case"},{"location":"user-guide/getting-started/#whats-next","text":"Congratulations! You have not only set up everything that's necessary to run your very own XAI Demonstrator , but already a use case.","title":"What's next?"},{"location":"user-guide/use-cases/","text":"Creating use cases # The XAI Demonstrator comprises a collection of fully independent use cases. Each use case aims to illustrate a particular application of Explainable AI (XAI) methods. On this page, we show you how to add another use case. In the process, we discuss some of our fundamental design considerations and give an overview of the architecture. What is a \"use case\"? # On a technical level, each use case consists of a user interface (frontend) paired with a stateless microservice (backend). The frontend is a single-page web application (SPA) that the users interact with on their smartphone. While the frontend is arguably the component most challenging to design, from a technical perspective, it's a fairly standard and lightweight web app. The backend, on the other hand, is where the AI predictions and corresponding explanations are generated. (Throughout this guide, we will assume that \"the AI\" is some sort of machine-learning model. In line with most common machine-learning frameworks, we will refer to all model outputs \"predictions\".) The backend provides an HTTP-API that the frontend calls to request and receive predictions and explanations. From a technical point of view, the frontend (that runs in the users' web browser) and the backend (which is hosted on a server somewhere \"on the internet\") are two separate entities. Indeed, in the more advanced deployment configurations of the XAI Demonstrator , the two are usually not provided through the same service. In this guide, however, we will take a designer's perspective and consider a use case as a unit. A note on code organization \ud83d\udca1 The entire code for the XAI Demonstrator lives in one single Git repository, a so-called monorepo. Hence, you can just clone the repository and are good to go. Compared to the perhaps more traditional approach of keeping each use case in a separate repository, a monorepo might at first seem daunting and overly complex. However, especially when working with a team of varying levels of experience (like ours ), you will probably soon see how convenient it is to keep all the code in one place. Everyone can immediately see where changes have been made and how the different components relate to each other. It is also straightforward to deploy the XAI Demonstrator to your local machine or some cloud infrastructure, as all the required scripts and configuration files live in the monorepo as well. To learn more about why we chose this approach and what goes on behind the scenes, see this tech note . Adding a use case # Each use case is self-contained and resides in its own top-level directory. This directory contains the code for the backend and the frontend and the instructions on how to combine the two. In the case that a use case builds on a custom machine learning model, the code describing its training finds its place in the use case's directory as well. Thus, the first step in adding a use case is to create a new directory at the root of the repository. All XAI Demonstrator use cases adhere to the following basic structure and naming convention, which we recommend you follow as well: use-case/ | |- case-backend/ # (1) | |- case/ | | |- __init__.py | | |- main.py | | | |- requirements.txt | |- case-frontend/ # (2) | |- src/ | | |- App.vue | | | |- package.json | |- Dockerfile # (3) |- README.md The most important elements, which we will instantiate in the following, are: 1. A microservice built with FastAPI (the backend). 2. A VueJS single-page application (the frontend). 3. A Dockerfile that describes how to assemble backend and frontend into a single container. A note on the XAI Demonstrator 's tech stack \ud83d\udca1 The XAI Demonstrator use case backends are FastAPI microservices, while the frontends are VueJS single-page applications. Both frameworks are not only versatile and convenient, but are beginner-friendly choices. In principle, you can choose whatever programming language and framework you like for your use cases. As long as you provide a Docker container with an HTTP API and a corresponding web frontend, you're good to go. However, to fully benefit from the infrastructure and utilities the XAI Demonstrator provides, we recommend you stay as close to its original tech stack as possible. To learn more about how and why we selected these frameworks, see this tech note . Create the backend microservice # Use case backends should be stateless All XAI Demonstrator backends are stateless. In other words, each call to their API is self-contained: The response to a request does not depend on information from previous requests. This is an established approach to designing microservices that makes their development, testing, and monitoring straightforward. Further, it allows us to run multiple instances of the backends in parallel and distribute the frontends' calls among them. In particular, it enables us to deploy the XAI Demonstrator to a serverless infrastructure. (Don't worry if at this point you have no idea what that means.) We strongly recommend that you design your backends to be stateless as well. Create the frontend # Serving the frontend To be able to operate a use case on its own, in addition to delivering predictions and explanations, the backend needs to deliver the frontend to the user's browser. The xaidemo package provides a helper function that generates the necessary routes: from xaidemo.routers import vue_frontend app = FastAPI() app.include_router(vue_frontend(__file__)) Note that this requires ... . See the next section. Assemble the use case # All of this can be described in a single Dockerfile , which : # FIRST STAGE FROM node:12-alpine as builder WORKDIR / # Copy the frontend code into the container COPY ./case-frontend/ . # Install frontend dependencies and build the frontend RUN npm install && npm run build # SECOND STAGE FROM python:3.8-slim WORKDIR / # Copy the backend code COPY case-backend/case /case # Install all Python dependencies COPY case-backend/requirements.txt /requirements.txt RUN pip install --upgrade pip RUN pip install -r /requirements.txt \\ && rm -rf /root/.cache/pip # Copy the frontend from the first stage RUN mkdir /case/static COPY --from=builder /dist/ /case/static/ # Launch backend service CMD [\"uvicorn\", \"case.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"] With this Docker file, the use case can be built and started: cd use-case docker run What's next? #","title":"Creating use cases"},{"location":"user-guide/use-cases/#creating-use-cases","text":"The XAI Demonstrator comprises a collection of fully independent use cases. Each use case aims to illustrate a particular application of Explainable AI (XAI) methods. On this page, we show you how to add another use case. In the process, we discuss some of our fundamental design considerations and give an overview of the architecture.","title":"Creating use cases"},{"location":"user-guide/use-cases/#what-is-a-use-case","text":"On a technical level, each use case consists of a user interface (frontend) paired with a stateless microservice (backend). The frontend is a single-page web application (SPA) that the users interact with on their smartphone. While the frontend is arguably the component most challenging to design, from a technical perspective, it's a fairly standard and lightweight web app. The backend, on the other hand, is where the AI predictions and corresponding explanations are generated. (Throughout this guide, we will assume that \"the AI\" is some sort of machine-learning model. In line with most common machine-learning frameworks, we will refer to all model outputs \"predictions\".) The backend provides an HTTP-API that the frontend calls to request and receive predictions and explanations. From a technical point of view, the frontend (that runs in the users' web browser) and the backend (which is hosted on a server somewhere \"on the internet\") are two separate entities. Indeed, in the more advanced deployment configurations of the XAI Demonstrator , the two are usually not provided through the same service. In this guide, however, we will take a designer's perspective and consider a use case as a unit. A note on code organization \ud83d\udca1 The entire code for the XAI Demonstrator lives in one single Git repository, a so-called monorepo. Hence, you can just clone the repository and are good to go. Compared to the perhaps more traditional approach of keeping each use case in a separate repository, a monorepo might at first seem daunting and overly complex. However, especially when working with a team of varying levels of experience (like ours ), you will probably soon see how convenient it is to keep all the code in one place. Everyone can immediately see where changes have been made and how the different components relate to each other. It is also straightforward to deploy the XAI Demonstrator to your local machine or some cloud infrastructure, as all the required scripts and configuration files live in the monorepo as well. To learn more about why we chose this approach and what goes on behind the scenes, see this tech note .","title":"What is a \"use case\"?"},{"location":"user-guide/use-cases/#adding-a-use-case","text":"Each use case is self-contained and resides in its own top-level directory. This directory contains the code for the backend and the frontend and the instructions on how to combine the two. In the case that a use case builds on a custom machine learning model, the code describing its training finds its place in the use case's directory as well. Thus, the first step in adding a use case is to create a new directory at the root of the repository. All XAI Demonstrator use cases adhere to the following basic structure and naming convention, which we recommend you follow as well: use-case/ | |- case-backend/ # (1) | |- case/ | | |- __init__.py | | |- main.py | | | |- requirements.txt | |- case-frontend/ # (2) | |- src/ | | |- App.vue | | | |- package.json | |- Dockerfile # (3) |- README.md The most important elements, which we will instantiate in the following, are: 1. A microservice built with FastAPI (the backend). 2. A VueJS single-page application (the frontend). 3. A Dockerfile that describes how to assemble backend and frontend into a single container. A note on the XAI Demonstrator 's tech stack \ud83d\udca1 The XAI Demonstrator use case backends are FastAPI microservices, while the frontends are VueJS single-page applications. Both frameworks are not only versatile and convenient, but are beginner-friendly choices. In principle, you can choose whatever programming language and framework you like for your use cases. As long as you provide a Docker container with an HTTP API and a corresponding web frontend, you're good to go. However, to fully benefit from the infrastructure and utilities the XAI Demonstrator provides, we recommend you stay as close to its original tech stack as possible. To learn more about how and why we selected these frameworks, see this tech note .","title":"Adding a use case"},{"location":"user-guide/use-cases/#create-the-backend-microservice","text":"Use case backends should be stateless All XAI Demonstrator backends are stateless. In other words, each call to their API is self-contained: The response to a request does not depend on information from previous requests. This is an established approach to designing microservices that makes their development, testing, and monitoring straightforward. Further, it allows us to run multiple instances of the backends in parallel and distribute the frontends' calls among them. In particular, it enables us to deploy the XAI Demonstrator to a serverless infrastructure. (Don't worry if at this point you have no idea what that means.) We strongly recommend that you design your backends to be stateless as well.","title":"Create the backend microservice"},{"location":"user-guide/use-cases/#create-the-frontend","text":"Serving the frontend To be able to operate a use case on its own, in addition to delivering predictions and explanations, the backend needs to deliver the frontend to the user's browser. The xaidemo package provides a helper function that generates the necessary routes: from xaidemo.routers import vue_frontend app = FastAPI() app.include_router(vue_frontend(__file__)) Note that this requires ... . See the next section.","title":"Create the frontend"},{"location":"user-guide/use-cases/#assemble-the-use-case","text":"All of this can be described in a single Dockerfile , which : # FIRST STAGE FROM node:12-alpine as builder WORKDIR / # Copy the frontend code into the container COPY ./case-frontend/ . # Install frontend dependencies and build the frontend RUN npm install && npm run build # SECOND STAGE FROM python:3.8-slim WORKDIR / # Copy the backend code COPY case-backend/case /case # Install all Python dependencies COPY case-backend/requirements.txt /requirements.txt RUN pip install --upgrade pip RUN pip install -r /requirements.txt \\ && rm -rf /root/.cache/pip # Copy the frontend from the first stage RUN mkdir /case/static COPY --from=builder /dist/ /case/static/ # Launch backend service CMD [\"uvicorn\", \"case.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"] With this Docker file, the use case can be built and started: cd use-case docker run","title":"Assemble the use case"},{"location":"user-guide/use-cases/#whats-next","text":"","title":"What's next?"}]}